import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

ext.ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder()

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.0 rc1"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        ndk {
            moduleName "CA"
        }
    }

    sourceSets.main {
        //disable automatic ndk-build call
        jni.srcDirs = []
        //when setting jni.srcDir empty, make sure to specify jniLibs.srcDir
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            jniDebuggable false
        }

        debug {
            jniDebuggable true
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        ndkBuildCmd(it, false)
    }

    task ndkBuildDebug(type: Exec) {
        ndkBuildCmd(it, true)
    }

    tasks.withType(JavaCompile) { compileTask ->
        def isDebug = compileTask.name.startsWith('compileDebug')
        def ndkBuildTask = isDebug? ndkBuildDebug : ndkBuild
        compileTask.dependsOn ndkBuildTask
    }

    task ndkClean(type: Exec) {
        def projectPath = file('src/main').absolutePath
        def buildPath = file('build').absolutePath

        commandLine ndkBuildExec(),
                '-C', projectPath,
                "NDK_OUT=${buildPath}/intermediates/ndk/release/obj",
                "NDK_LIBS_OUT=${buildPath}/intermediates/ndk/release/lib",
                'clean'
        commandLine ndkBuildExec(),
                '-C', projectPath,
                "NDK_OUT=${buildPath}/intermediates/ndk/debug/obj",
                "NDK_LIBS_OUT=${buildPath}/intermediates/ndk/debug/lib",
                'clean'
    }

    tasks.withType(Delete) { cleanTask ->
        cleanTask.dependsOn ndkClean
    }
}

def ndkBuildCmd(task, isDebug) {
    def projectPath = file('src/main').absolutePath
    def buildPath = file('build').absolutePath

    task.commandLine ndkBuildExec(), "NDK_DEBUG=${isDebug?1:1}", 'V=1',
            '-C', projectPath,
            "NDK_OUT=${buildPath}/intermediates/ndk/${isDebug?"debug":"release"}/obj",
            "NDK_LIBS_OUT=${buildPath}/intermediates/ndk/${isDebug?"debug":"release"}/lib"
}

def ndkBuildExec() {
    return Os.isFamily(Os.FAMILY_WINDOWS)? "${project.ext.ndkDir}/ndk-build.cmd" : "${project.ext.ndkDir}/ndk-build"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}
